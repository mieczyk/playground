# To run the server (from the directory containing the app.py file): 
#   poetry run uvicorn app:app --reload

# uvicorn - ASGI web server (https://www.uvicorn.org/).
# --reload - automatically reload app after each change.
import time
from fastapi import FastAPI, Request
from fastapi.responses import StreamingResponse

app = FastAPI()

# Returns a "JSONResponse" object.
@app.get("/info")
async def info(timestamp: float = None):
    return { "msg": "My first FastAPI application" }

@app.get("/v2/info")
async def info_v2():
    return { "msg": "Version 2 of my first application" }

# Function-based middleware definition.
# `request` = all information associated with the incoming request.
# `call_next` = function that returns a response generated by the endpoint.
# It has an access to the incoming request (by the `request` param) and to
# the outgoing response (returned by the `call_next` function).
@app.middleware("http")
async def set_timestamp_on_request_and_response(request: Request, call_next):
    current_timestamp = time.time()
    
    # Add timestamp to the request.
    request.scope["path"] = f"{str(request.url.path)}?timestamp={current_timestamp}"

    # Process the modified request and intercept the response
    response = await call_next(request)

    # Add custom header to the response
    if isinstance(response, StreamingResponse):
        response.headers["X-Timestamp"] = str(current_timestamp)

    return response